import matplotlib.pyplot as plt
import numpy as np

print("Enter x size of the maze: ")
#Please enter '6' or '8',then push the enter button
x_inp = input()
print("Enter y size of the maze: ")
#Please enter same of X,then push the enter button
y_inp = input()

print("difficulty of maze(Pick: 0 or 1)")
#Please enter '0' or '1',then push the enter button
diff_inp = input()

matrix_initial = np.zeros((int(x_inp), int(y_inp)))
c = matrix_initial
if diff_inp == "0":
    file = open('660.txt', 'r')

if (diff_inp == '1'):
    file = open('661.txt', 'r')

no_column = 0
for line in file:
    no_row = 0
    for word in line.split():  # Reading each cell
        matrix_initial[no_column, no_row] = int(word)
        no_row += 1
    no_column += 1

plt.imshow(matrix_initial, cmap='binary')
plt.show()
# This is a maze drawing code.

#Please change the start&end point for matrices
start = 0, 1
end = 5, 2

def step(k):
    for i in range(len(m)):
        for j in range(len(m[i])):
            if m[i][j] == k:
                if i > 0 and m[i - 1][j] == 0 and c[i - 1][j] == 0:
                    m[i - 1][j] = k + 1
                if j > 0 and m[i][j - 1] == 0 and c[i][j - 1] == 0:
                    m[i][j - 1] = k + 1
                if i < len(m) - 1 and m[i + 1][j] == 0 and c[i + 1][j] == 0:
                    m[i + 1][j] = k + 1
                if j < len(m[i]) - 1 and m[i][j + 1] == 0 and c[i][j + 1] == 0:
                    m[i][j + 1] = k + 1


def printfunc(m):
    for i in range(len(m)):
        for j in range(len(m[i])):
            print(str(m[i][j]).ljust(2), end =' ')
        print()


m = []
for i in range(len(c)):
    m.append([])
    for j in range(len(c[i])):
        m[-1].append(0)
i, j = start
m[i][j] = 1

k = 0
while m[end[0]][end[1]] == 0:
    k += 1
    step(k)


i, j = end
k = m[i][j]
road = [(i, j)]
while k > 1:
    if i > 0 and m[i - 1][j] == k - 1:
        i, j = i - 1, j
        road.append((i, j))
        k -= 1
    elif j > 0 and m[i][j - 1] == k - 1:
        i, j = i, j - 1
        road.append((i, j))
        k -= 1
    elif i < len(m) - 1 and m[i + 1][j] == k - 1:
        i, j = i + 1, j
        road.append((i, j))
        k -= 1
    elif j < len(m[i]) - 1 and m[i][j + 1] == k - 1:
        i, j = i, j + 1
        road.append((i, j))
        k -= 1

printfunc(m)
print(road)
plt.matshow(m)
plt.show()

path = np.zeros((int(x_inp), int(y_inp)))

for e in range(len(road)):
    path[road[e]] = 1

plt.matshow(path)
plt.show()
